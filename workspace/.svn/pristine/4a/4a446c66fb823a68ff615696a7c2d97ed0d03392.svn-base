package com.turingpoint.controller.polling;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.turingpoint.controller.ServerContext;
import com.turingpoint.dbmodel.db.dto.LectureStatus;
import com.turingpoint.dbmodel.db.mapping.Lecture;
import com.turingpoint.dbmodel.db.mapping.Question;
import com.turingpoint.dbmodel.db.mapping.QuestionOption;
import com.turingpoint.dbmodel.db.mapping.Response.ResponseId;
import com.turingpoint.dbmodel.db.persister.LecturePersister;
import com.turingpoint.dbmodel.db.persister.QuestionOptionPersister;
import com.turingpoint.dbmodel.db.persister.ResponsePersister;
import com.turingpoint.dbmodel.model.QuestionType;

@Path("/results")
@Produces(MediaType.APPLICATION_JSON)
public class ResultsServices 
{
	ServerContext server = ServerContext.INSTANCE;
	
	@GET
	@Path("/{questionID}")
	public Response getLiveQuestionResults(@PathParam("questionID") Long questionID)
	{
		//get the cached responses for the question id
		HashMap<com.turingpoint.dbmodel.db.mapping.Response.ResponseId,com.turingpoint.dbmodel.db.mapping.Response> responses = server.getCacheResponses(questionID);
		if(responses != null)
		{
			//get the unique entries by name option, might want to do a different mapping later
			HashMap<String, Integer> countMappings = new HashMap<String,Integer>();
			
			int totalQuestionResponses = responses.size();
			int totalCorrectResponses = 0;
			
			for (Map.Entry<com.turingpoint.dbmodel.db.mapping.Response.ResponseId, com.turingpoint.dbmodel.db.mapping.Response> entry : responses.entrySet())
			{
				//if this response is a text response.... make that an option and add a count to that
				String optionText = "";
				
				if(!entry.getValue().getTextResponse().equals(""))
				{
					optionText = entry.getValue().getTextResponse();
					//decide if that is right
					if( server.getIsCorrectResponse(questionID, 0L, optionText) )
					{
						totalCorrectResponses += 1;
					}
				}
				else
				{
					Long optId = entry.getValue().getOptionId();
					optionText = server.getOptionText(questionID, optId);
					if(server.getIsCorrectResponse(questionID, optId, ""))
					{
						totalCorrectResponses += 1;
					}
				}
				
				
				if(!countMappings.containsKey(optionText))
				{
					countMappings.put(optionText, 0);
				}
				
				countMappings.put(optionText, countMappings.get(optionText) + 1);
			}
			
			JSONObject responseObject = new JSONObject();
			JSONArray responseArray = new JSONArray();
			
			responseObject.put("count", totalQuestionResponses);
			responseObject.put("correct", totalCorrectResponses);
			
			for (Map.Entry<String, Integer> entry : countMappings.entrySet())
			{
				JSONObject obj = new JSONObject();
				
				obj.put(entry.getKey(), entry.getValue());
				
				responseArray.put(obj);
			}
			
			responseObject.put("responses", responseArray);
			return Response.status(200).entity(responseObject.toString()).build();
		}
		
		JSONObject responseObject = new JSONObject();
		responseObject.put("msg", "No dice");
		return Response.status(400).entity(responseObject.toString()).build();
		//return null;
	}
	
	@GET
	@Path("/{questionID}/responsecount")
	public Response getNumberOfResponses(@PathParam("questionID") Long questionID)
	{
		if(questionID == null)
			return Response.status(400).entity("Provided question id is null.").build();
		Long count = null;
		try{
		 count = ResponsePersister.getNumberOfResponses(questionID);
		} catch (Exception e){
			JSONObject responseObject = new JSONObject();
			responseObject.put("msg", "Unable to fetch the count of responses for question id " + questionID + ".");
			return Response.status(400).entity(responseObject.toString()).build();
		}
		if(count != null)
		{
			JSONObject responseObject = new JSONObject();
			responseObject.put("count", count.longValue());
			return Response.status(200).entity(responseObject.toString()).build();
		} else
			return Response.status(400).entity("Count returned is null.").build();
	}
	
	@GET
	@Path("/{classID}/class")
	public Response getClassQuestionResults(@PathParam("classID") Long classID)
	{
		
		List<Lecture> lectures = LecturePersister.getLecturesForCourse(classID);
		
		//iterate o
		for(Lecture L : lectures)
		{
			
		}
		
		
		JSONObject responseObject = new JSONObject();
		responseObject.put("msg", "No dice");
		return Response.status(400).entity(responseObject.toString()).build();
	}
	
	//idea to use big decimal cmae from here http://www.codejava.net/coding/how-to-round-decimal-number-with-n-digits-after-decimal-point
	public static double round(double value, int n) {
		BigDecimal numberValue = new BigDecimal(value);
		numberValue = numberValue.setScale(n, BigDecimal.ROUND_HALF_UP);
		return numberValue.doubleValue();
	}
	
	public static int numDigits(String doubleString)
	{
		String[] headTail = doubleString.split(".",2);
		
		//Tail is the length of the number of didits
		return headTail[1].length() + 1;
	}
	
	private JSONObject buildQuestionResults(Long questionID, Long userID, boolean exportMode)
	{
		Question questionInQuestion = Question.getQuestion(questionID);
		List<com.turingpoint.dbmodel.db.mapping.Response> responses;
	
		//If we do not supply a user id we are should be an instructor, give us the list of who answered what
		if(userID == null)
		{
			responses = ResponsePersister.getQuestionResponses(questionID);
		}
		//Filter responses by ID if not getting all responses
		else
		{
			List<com.turingpoint.dbmodel.db.mapping.Response> preScreenedresponses = ResponsePersister.getQuestionResponses(questionID);
			responses = new ArrayList<com.turingpoint.dbmodel.db.mapping.Response>();	
		
			//filter out responses not for the particular student
			for(com.turingpoint.dbmodel.db.mapping.Response R : preScreenedresponses)
			{
				ResponseId rid = R.getResponseId();
				if(rid.getUserId().equals(userID))
					responses.add(R);
			}

		}
		
		JSONObject responseObject = new JSONObject();
		JSONArray responseArray = new JSONArray();
		JSONObject allUserResponses = new JSONObject();
		JSONObject userResponseAttributes = new JSONObject();
		//JSONArray userResponsesForOption = new JSONArray();
		
		
		String feedbackString = questionInQuestion.getFeedback();
		//Get the name of the question we are asking about
		responseObject.put("title", questionInQuestion.getTitle());
		responseObject.put("value", 1);
		responseObject.put("qID", questionID);
		responseObject.put("feedback",feedbackString);
		
		//Depending on the question type....
		if(questionInQuestion.getType() == QuestionType.MULTIPLE_CHOICE )
		{
			
			//Count of what is selected, multuple choice
			HashMap<Long, Integer> countMappings = new HashMap<Long,Integer>();
			HashMap<Long, String> responseTextMappings = new HashMap<Long,String>();
			HashMap<Long, Boolean> corectnessMappings = new HashMap<Long,Boolean>();
			
			
			allUserResponses = new JSONObject();
			//HashMap<Long, List<Long>> usersWhoSelectedThisOption = new HashMap<Long, List<Long>>();
			int respondantsCount = 0;
			List<QuestionOption> options = QuestionOptionPersister.getQuestionOptions(questionID);
	
			//Preload the options
			for(QuestionOption O : options)
			{
				if(!countMappings.containsKey(O.getOptionId()))
				{
					countMappings.put(O.getOptionId(), 0);
					responseTextMappings.put(O.getOptionId(), O.getName());
					corectnessMappings.put(O.getOptionId(), O.getIsCorrect());
				}
			}
			
			Long whoAnswered;
			Long selectedOption;
			Date dateOfResponse;
			//QuestionOption option = null;
			//iterate over all recorded responses to this question
			for(com.turingpoint.dbmodel.db.mapping.Response R : responses)
			{
				userResponseAttributes = new JSONObject();
				
				selectedOption = R.getOptionId();
				whoAnswered = R.getResponseId().getUserId();
				dateOfResponse = R.getDate();
				
				
				userResponseAttributes.put("userID", whoAnswered);
				userResponseAttributes.put("date", dateOfResponse);

				try
				{
					JSONArray targetArray = allUserResponses.getJSONArray(selectedOption+"");
				}
				catch(JSONException e)
				{
					allUserResponses.put(selectedOption+"", new JSONArray());
				}
				
				allUserResponses.getJSONArray(selectedOption+"").put(userResponseAttributes);
				
				//Get the mappings for count
				countMappings.put(selectedOption, (countMappings.get(selectedOption) + 1) );
				respondantsCount = respondantsCount + 1;
			}
			
			JSONObject obj;// = new JSONObject();
			Long key;// = entry.getKey();
			int index = 0;
			//put responses together into a bundle
			for (Map.Entry<Long, Integer> entry : countMappings.entrySet())
			{
			
				obj = new JSONObject();
				key = entry.getKey();
				
				obj.put("rowid",index);
				obj.put("id",key);
				obj.put("count",entry.getValue());
				obj.put("name",responseTextMappings.get(key));
				obj.put("correct",corectnessMappings.get(key));
				
				try
				{
					obj.put("users", allUserResponses.getJSONArray(key+""));
				}
				catch(JSONException e)
				{
					obj.put("users", new JSONArray());
				}
				
				
				//obj.put("users", allUserResponses);
				index++;
				
				responseArray.put(obj);
			}
			
			//responseObject.put("users", allUserResponses);
			responseObject.put("results", responseArray);
			responseObject.put("respondants", respondantsCount);
			responseObject.put("value", 1);
		}
		else if (questionInQuestion.getType() == QuestionType.FILL_IN_BLANK || questionInQuestion.getType() == QuestionType.NUMERIC_RESPONSE )
		{
			//Count of what is selected, multuple choice
			HashMap<String, Integer> countMappings = new HashMap<String,Integer>();
			HashMap<String, Boolean> corectnessMappings = new HashMap<String,Boolean>();
			//HashMap<String, List<Long>> usersWhoSelectedThisOption = new HashMap<String, List<Long>>();
			
			allUserResponses = new JSONObject();
			
			int respondantsCount = 0;
			double responseMargin = 0.0f;
			
			QuestionOption option = QuestionOptionPersister.getQuestionOptions(questionID).get(0);
			String optionText = option.getAnswer().toLowerCase().trim();
			
			if (questionInQuestion.getType() == QuestionType.NUMERIC_RESPONSE)
			{
				
				optionText = option.getAnswer().toLowerCase().trim().split(";",2)[0];
				responseMargin = Double.parseDouble(option.getAnswer().toLowerCase().trim().split(";",2)[1]);
				
			}
			
			//add the correct option to the mix
			if(!countMappings.containsKey(optionText))
			{
				countMappings.put(optionText, 0);
				corectnessMappings.put(optionText, true);
			}
			
			boolean correct = false;
			boolean abort = false;
			String answerText = "";
			Long whoAnswered;
			Date dateOfResponse;
			//iterate over all recorded responses to this question
			for(com.turingpoint.dbmodel.db.mapping.Response R : responses)
			{
					//Reset to assuming the answer is wrong
					correct = false;
					
					userResponseAttributes = new JSONObject();
				
					answerText = R.getTextResponse().toLowerCase().trim();
					whoAnswered = R.getResponseId().getUserId();
					dateOfResponse = R.getDate();
					
					
					userResponseAttributes.put("userID", whoAnswered);
					userResponseAttributes.put("date", dateOfResponse);
					
					if(questionInQuestion.getType() == QuestionType.FILL_IN_BLANK)
					{
						if(answerText.equals(optionText))
						{
							correct = true;
						}
						else
							correct = false;
					}
					else if (questionInQuestion.getType() == QuestionType.NUMERIC_RESPONSE)
					{
						String[] splitContent;
						double correctnessMain = 0f;
						double correctnessMargin = 0f;
						double answeredNumber = 0f;
						
						splitContent = option.getAnswer().toLowerCase().trim().split(";",2);
						
						try
						{
							correctnessMain = ResultsServices.round(Double.parseDouble(splitContent[0]),ResultsServices.numDigits(splitContent[0]));
							correctnessMargin = ResultsServices.round(Double.parseDouble(splitContent[1]),ResultsServices.numDigits(splitContent[1]));
						}
						catch(NumberFormatException e)
						{
							//should never get here
							System.out.println("Got to place I should not be : 286 / Results services");
							abort = true;
						}
						
						try
						{
							answeredNumber = ResultsServices.round(Double.parseDouble(answerText),ResultsServices.numDigits(answerText));
						}
						catch(NumberFormatException e)
						{
							System.out.println("Got to place I should not be : 295 / Results services");
							abort = true;
						}
						
						//check if the number is within our error tolerance
						if(!abort)
						{
							double margin = answeredNumber - correctnessMain;
							
							
							if(Math.abs(margin) <= correctnessMargin)
							{
								correct = true;
							}
						}
						else
							correct = false;
						
					}
					
					if(!countMappings.containsKey(answerText))
					{
						countMappings.put(answerText, 0);
						corectnessMappings.put(answerText, false);
					}
					
					try
					{
						JSONArray targetArray = allUserResponses.getJSONArray(answerText+"");
					}
					catch(JSONException e)
					{
						allUserResponses.put(answerText+"", new JSONArray());
					}
					
					allUserResponses.getJSONArray(answerText+"").put(userResponseAttributes);
					
					/*
					//Add a list here if not already exists for that option
					if(!usersWhoSelectedThisOption.containsKey(answerText))
					{
						usersWhoSelectedThisOption.put(answerText, new ArrayList<Long>());
					}
					//Add the answering user to the list
					usersWhoSelectedThisOption.get(answerText).add(whoAnswered);*/
					
					countMappings.put(answerText, (countMappings.get(answerText) + 1) );
					corectnessMappings.put(answerText, correct);
					
					respondantsCount = respondantsCount + 1;						
			}

			
			
			JSONObject obj;// = new JSONObject();
			String textKey;// = entry.getKey();
			int index = 0;
			//put responses together into a bundle
			for (Map.Entry<String, Integer> entry : countMappings.entrySet())
			{
				obj = new JSONObject();
				textKey = entry.getKey();

				obj.put("rowid",index);
				obj.put("id",option.getOptionId());
				obj.put("count",entry.getValue());
				obj.put("name",textKey);
				obj.put("correct",corectnessMappings.get(textKey));
				try
				{
					obj.put("users", allUserResponses.getJSONArray(textKey+""));
				}
				catch(JSONException e)
				{
					obj.put("users", new JSONArray());
				}
				index++;
				
				responseArray.put(obj);
			}
			

			if (questionInQuestion.getType() == QuestionType.NUMERIC_RESPONSE)
			{
				responseObject.put("margin", responseMargin);	
			}
			
			responseObject.put("results", responseArray);
			responseObject.put("respondants", respondantsCount);
			responseObject.put("value", 1);
		}
		else if(questionInQuestion.getType() == QuestionType.MULTIPLE_ANSWER)
		{
			
			//Count of what is selected, multuple choice
			HashMap<Long, Integer> countMappings = new HashMap<Long,Integer>();
			HashMap<Long, String> responseTextMappings = new HashMap<Long,String>();
			HashMap<Long, Boolean> corectnessMappings = new HashMap<Long,Boolean>();
			//HashMap<Long, List<Long>> usersWhoSelectedThisOption = new HashMap<Long, List<Long>>();
			
			allUserResponses = new JSONObject();
			
			int respondantsCount = 0;
			List<QuestionOption> options = QuestionOptionPersister.getQuestionOptions(questionID);
			int numberOfCorrectAnswers = 0;
	
			//Preload the options
			for(QuestionOption O : options)
			{
				if(!countMappings.containsKey(O.getOptionId()))
				{
					countMappings.put(O.getOptionId(), 0);
					responseTextMappings.put(O.getOptionId(), O.getName());
					corectnessMappings.put(O.getOptionId(), O.getIsCorrect());
					if(O.getIsCorrect())
						numberOfCorrectAnswers++;
				}
			}
			
			Long whoAnswered;
			Long selectedOption;
			String responseList;
			String[] responsesBrokenUp;
			Date dateOfResponse;
			//QuestionOption option = null;
			//iterate over all recorded responses to this question
			for(com.turingpoint.dbmodel.db.mapping.Response R : responses)
			{
				userResponseAttributes = new JSONObject();
				
				//Get the list of responses from the new column
				responseList = R.getSelectedAnswers();
				whoAnswered = R.getResponseId().getUserId();
				dateOfResponse = R.getDate();
				
				
				userResponseAttributes.put("userID", whoAnswered);
				userResponseAttributes.put("date", dateOfResponse);

				
				responsesBrokenUp = responseList.split(",");
				for (String S : responsesBrokenUp)
				{
					//get the option id represented by this text
					selectedOption = Long.parseLong(S);
					
					try
					{
						JSONArray targetArray = allUserResponses.getJSONArray(selectedOption+"");
					}
					catch(JSONException e)
					{
						allUserResponses.put(selectedOption+"", new JSONArray());
					}
					
					allUserResponses.getJSONArray(selectedOption+"").put(userResponseAttributes);

					
					//Get the mappings for count
					countMappings.put(selectedOption, (countMappings.get(selectedOption) + 1) );	
				}
				respondantsCount = respondantsCount + 1;

			}
			
			JSONObject obj;// = new JSONObject();
			Long key;// = entry.getKey();
			int index = 0;
			//put responses together into a bundle
			for (Map.Entry<Long, Integer> entry : countMappings.entrySet())
			{
			
				obj = new JSONObject();
				key = entry.getKey();
				
				obj.put("rowid",index);
				obj.put("id",key);
				obj.put("count",entry.getValue());
				obj.put("name",responseTextMappings.get(key));
				obj.put("correct",corectnessMappings.get(key));
				try
				{
					obj.put("users", allUserResponses.getJSONArray(key+""));
				}
				catch(JSONException e)
				{
					obj.put("users", new JSONArray());
				}
				index++;
				
				responseArray.put(obj);
			}
			responseObject.put("respondants", respondantsCount);
			responseObject.put("value", numberOfCorrectAnswers);
			responseObject.put("results", responseArray);
			

		}

		return responseObject;
	}
	
	@GET
	@Path("/{lectureID}/lecture")
	public Response getLectureQuestionResults(@PathParam("lectureID") Long lectureID)
	{
		List<LectureStatus> lectureStatus = LecturePersister.getQuestionsForLecture(lectureID);
		JSONObject responseObject = new JSONObject();
		JSONArray responseArray = new JSONArray();
		
		//put responses together into a bundle
		for (LectureStatus L : lectureStatus)
		{
			//get results for this question
			JSONObject obj =  buildQuestionResults(L.getQuestionId(), null, false);
			
			responseArray.put(obj);
		}
		
		responseObject.put("lectureResults", responseArray);
		
		return Response.status(200).entity(responseObject.toString()).build();
	}
	
	@GET
	@Path("/{lectureID}/lecture/{userID}")
	public Response getLectureQuestionResults(@PathParam("lectureID") Long lectureID,@PathParam("userID") Long userID)
	{
		List<LectureStatus> lectureStatus = LecturePersister.getQuestionsForLecture(lectureID);
		JSONObject responseObject = new JSONObject();
		JSONArray responseArray = new JSONArray();
		
		//put responses together into a bundle
		for (LectureStatus L : lectureStatus)
		{
			//get results for this question
			JSONObject obj =  buildQuestionResults(L.getQuestionId(), userID, false);
			
			responseArray.put(obj);
		}
		
		responseObject.put("lectureResults", responseArray);
		
		return Response.status(200).entity(responseObject.toString()).build();
	}
	
	@GET
	@Path("/{questionID}/question")
	public Response getQuestionResults(@PathParam("questionID") Long questionID)
	{
		JSONObject responseObject = buildQuestionResults(questionID, null, false);
		
		//responseObject.put("msg", "No dice");
		return Response.status(200).entity(responseObject.toString()).build();
	}
	
	@GET
	@Path("/{questionID}/question/{userID}")
	public Response getQuestionResults(@PathParam("questionID") Long questionID,@PathParam("userID") Long userID)
	{
		JSONObject responseObject = buildQuestionResults(questionID, userID, false);
		
		//responseObject.put("msg", "No dice");
		return Response.status(200).entity(responseObject.toString()).build();
	}
	
}
