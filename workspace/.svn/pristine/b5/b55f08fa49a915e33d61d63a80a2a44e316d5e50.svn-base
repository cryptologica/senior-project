$(document).ready(function() {
	
	$.ajaxSetup({ cache: false });	// No caching of ajax calls
	
	$('[data-toggle="tooltip"]').tooltip(); // Activate any/all tooltips
	
	
	// Set the base session variables
	setBaseSessionVars();
	
	// Direct to login page if something isn't set correctly
	var currPage = getCurrentPageName();		// Extract current page from URL instead of through session variable
	//var currPage = sessionStorage.getItem('currPage');
	if (currPage != null && (currPage == "login" || currPage == "register" ) ) {
		// Do nothing, are trying to log in
	} else{
		// Make sure all required variables are set
		var currUser = sessionStorage.getItem('currUser');
		var userID = sessionStorage.getItem('userID');
		var role = sessionStorage.getItem('role');
		if(currUser == null || userID == null || role == null){
			sessionStorage.setItem('currPage', 'login');
			loadPage("login");
		}
	}
	
	$.get("header.html", function(data) {	// Inject header
    	$("#header").empty();
    	$("#header").html(data);    	
    	loadMenu();	// Call method that can be present on page-specific js after header loads
    	
    	setLoginInfo();
	});
	
	
	var existingCourseId = GetURLParameter("courseId");
	if(existingCourseId != null)
		sessionStorage.setItem('courseID', existingCourseId);
	var existingLectureId = GetURLParameter("lectureId");
	if(existingLectureId != null)
		sessionStorage.setItem('lectureID', existingLectureId);
	var existingUserId = GetURLParameter("userId");
	if(existingUserId != null)
		sessionStorage.setItem('userID', existingUserId);
	var existingQuestionId = GetURLParameter("questionId");
	if(existingQuestionId != null)
		sessionStorage.setItem('questionID', existingQuestionId);
	
	if (typeof(queryString) != "undefined"){
		var courseID = sessionStorage.getItem('courseID');
		if(courseID != null)
			queryString.push('courseId', courseID);
		
		var lectureId = sessionStorage.getItem('lectureID');
		if(lectureId != null)
			queryString.push('lectureId', lectureId);
		
		var userId = sessionStorage.getItem('userID');
		if(lectureId != null)
			queryString.push('userId', userId);
	} else {
		console.log('URL query string injector not added to page HTML, cannot use the URL query enhancer unless you add it...'+
				' Can add <script src="../js/query-string.js"></script> to the page head tag to utilize it.');
	}
	
});

/**
 * Extract the curreng page name from the page's URL
 */
function getCurrentPageName(){
	var urlPath = $(location)[0].pathname;
	var regExp = /\/([^)]+)\/([^)]+)\.html/g;
	var matches = regExp.exec(urlPath);

	// Direct to login page if something isn't set correctly
	return matches[matches.length -1];		// Extract current page from URL instead of through session variable
}


/**
 * Authentication handling, inject Authorization header info on all ajax requests
 */
$(document).ajaxSend(function (event, jqxhr, settings) {
	var auth = Cookies.get("Authorization");
	if(auth != null)
		jqxhr.setRequestHeader('Authorization', auth);
});


/**
 * Hide everything until it's loaded.
 * Prevents flash of unstyled content.
 */
$('body').ready(function() {
	document.body.style.visibility='visible'
});


/**
 * Set the user's name and toggle the login button to Logout
 */
function setLoginInfo(){
	var name = sessionStorage.getItem('currUser');
	var role = sessionStorage.getItem('role');
	if(name != null && role != null){
		$('#username').html('<span class="glyphicon glyphicon-user"></span> ' + name + ' (' + (role == 'STUDENT' ? "Student" : "Instructor") + ')' + '<span class="caret"></span>');
		$('#loginLogout').html('<span class="glyphicon glyphicon-log-out"></span> Logout');
		//also let real users give feedback
		$('#feedbackContainer').html('<a href="#" id="feedback" data-toggle="modal" data-target="#feedbackModal"><span class="glyphicon glyphicon-envelope" ></span> Submit Feedback</a>');
	}
}

var managePolls = '<li class="activeMenuItem"><a class="menuItem" page="managepolls" href="#"><i class="fa fa-th-list"></i> Manage Lectures</a></li>';
var manageResults = '<li class="activeMenuItem"><a class="menuItem" page="manageresults" href="#"><i class="fa fa-line-chart"></i> Manage Results</a></li>';
var manageStudents = '<li class="activeMenuItem"><a class="menuItem" page="managestudents" href="#"><i class="fa fa-user"></i> Manage Students</a></li>';


/**
 * Load the navigation menu
 */
function loadMenu(){
	// Extract the current page via the current url
    var re = /(.*\/)(.+)(\.html)/i;
    var found = window.location.href.match(re);
    var currentPage = found[2];
	
	var menu = $('#menu');
	$(menu).empty();
	
	var home = '<li class="activeMenuItem"><a class="menuItem" page="home" href="#"><i class="fa fa-home"></i> Home</a></li>';

	if(currentPage == "home"){
		$(menu).append(home);
		$('[page="' + currentPage  + '"]').parent().addClass("active");	// Make this the active menu item
	} else if (currentPage == "managepolls" || currentPage == "managestudents" || currentPage == "manageresults"){
		$(menu).append(home);
		appendCourseList();
		appendIntermediatMenuItems();
		
		$(menu).append( (currentPage == "managepolls" ? managePolls : currentPage == "managestudents" ? manageStudents : manageResults ) );
		$('[page="' + currentPage  + '"]').parent().addClass("active");	// Make this the active menu item

	} else if (currentPage == "results" || currentPage == "poll" || currentPage == "questionbank") {
		$(menu).append(home);
		appendCourseList();
		appendIntermediatMenuItems();
		
		if(currentPage == "questionbank"){
			appendActiveLecture(true);
			$(menu).append('<li class="activeMenuItem active"><a class="menuItem" page="questionbank" href="#"><span class="fa fa-bank"></span> Question Bank</a></li>');
		} else {
			appendActiveLecture(false);
			$(menu).append('<li class="activeMenuItem'+ ( currentPage == "results" ? "" : " active" ) +'"><a class="menuItem" page="poll" href="#"><span class="fa fa-bar-chart-o"></span> Poll Page</a></li>');
			$(menu).append('<li class="activeMenuItem'+ ( currentPage == "results" ? " active" : "" ) +'"><a class="menuItem" page="results" href="#"><span class="fa fa-check"></span> Results</a></li>');
		}
	} else if (currentPage == "register" || currentPage == "login"){
		$('.navbar-right').empty();
		$('.navbar-right').append('<li><a href="#" id="loginLogout"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>')
    	$('.navbar-right').append('<li><a href="#" id="username"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>');
		if(currentPage == "register")
			$('#username').parent().addClass('active');
		else
			$('#loginLogout').parent().addClass('active');
	}
	else if (currentPage == "home_student"){
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="home_student" href="#"><i class="fa fa-home"></i> Home</a></li>');
	}
	else if (currentPage == "addClass_student"){
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="home_student" href="#"><i class="fa fa-home"></i> Home</a></li>');
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="addClass_student" href="#"><span class="glyphicon glyphicon-search"></span> Add Class</a></li>');
	}
	else if (currentPage == "quiz_student"){
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="home_student" href="#"><i class="fa fa-home"></i> Home</a></li>');
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="quiz_student" href="#"><span class="glyphicon glyphicon-education"></span> Quiz</a></li>');
	}
	else if (currentPage == "review_student" || currentPage == "result_student"){
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="home_student" href="#"><i class="fa fa-home"></i> Home</a></li>');
		$(menu).append('<li class="activeMenuItem"><a class="menuItem" page="review_student" href="#"><span class="glyphicon glyphicon-signal"></span> Review</a></li>');
	}
}

/**
 * Append the Manage Lectures, Manage Results, and Manage Students buttons to the navigation menu 
 */
function appendIntermediatMenuItems(){
	var buttonsToAdd = '<li class="dropdown" id="manageDropdown">';
		buttonsToAdd += '<a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="fa fa-sliders"></span> Manage<span class="caret"></span></a>';
			buttonsToAdd += '<ul class="dropdown-menu">';
			buttonsToAdd += managePolls;
			buttonsToAdd += manageResults;
			buttonsToAdd += manageStudents;
		buttonsToAdd += '</ul></li>';
	$('#menu').append(buttonsToAdd);
}

/**
 * Adds a list of courses to the navigation bar
 */
function appendCourseList(){
	
	var courses =  JSON.parse(localStorage.getItem("courses"));
	//var courses = window.courses;
	
	var courseID = sessionStorage.getItem('courseID');
	var curCourse = getCourseByCourseID(courses, courseID);
	
	var displayLength = 18;	// Max width of words
	
	if(courses != null){
		var trimmedActive = trimText(curCourse.name, displayLength);
		var htmlToAppend =
			'<li class="dropdown dropdownHighlight" id="courseSelector"><a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="glyphicon glyphicon-education"></span> '+ trimmedActive + '<span class="caret"></span></a>'+
				'<ul class="dropdown-menu">';
		
		for(var i=0; i< courses.length; i++){
			var trimmedName = trimText(courses[i].name, displayLength);
			htmlToAppend += '<li><a href="#" class="courseNav" courseNavID="' + courses[i].courseId + '">' + trimmedName + '</a></li>';
		}
		// Close off tags
		htmlToAppend +=
				'</ul>'+
			'</li>';
		$(menu).append(htmlToAppend);
	}
}

/**
 * Append the lecture selector to the navigation menu
 */
function appendActiveLecture(isQuestionBank){
	
	var lectureID = sessionStorage.getItem("lectureID");
	
	var lectures =  JSON.parse(localStorage.getItem("lectures"));
	
	if(lectures == null){
		console.log("Lectures list null, attempting to fetch the list.");
		var courseID = sessionStorage.getItem('courseID');
		if(courseID == null)
			loadPage("login");
		
		var baseURL = sessionStorage.getItem("baseURL");
		var url = baseURL + "/courses/" + courseID + "/lectures";

		// Ask the server for a list of courses available for current user
		$.getJSON(url, function (data, status){
			// Store lectures for future use
			localStorage.setItem("lectures", JSON.stringify(data.Lectures));
			appendActiveLecture(isQuestionBank);	// Call this method again
		});
		return;
	}
	
	var curLecture = getLectureByLectureID(lectures, lectureID);
	
	var displayLength = 18;	// Max width of words
	
	if(lectures != null){
		if(isQuestionBank)
			var trimmedActive = "Question Bank";
		else
			var trimmedActive = trimText(curLecture.name, displayLength);
		var htmlToAppend =
			'<li class="dropdown dropdownHighlight" fullname="'+ (isQuestionBank ? trimmedActive : curLecture.name) +'" id="lectureSelector"><a class="dropdown-toggle" data-toggle="dropdown" href="#"><span class="fa fa-list"></span> '+ trimmedActive + '<span class="caret"></span></a>'+
				'<ul class="dropdown-menu">';
		htmlToAppend += '<li><a href="#" class="lectureNav" lectureNavID="-1"><i class="fa fa-bank"></i> Question Bank</a></li>';
		htmlToAppend += '<li class="nav-divider"></li>';
		for(var i=0; i< lectures.length; i++){
			var trimmedName = trimText(lectures[i].name, displayLength);
			htmlToAppend += '<li><a href="#" class="lectureNav" lectureNavID="' + lectures[i].lectureId + '">' + trimmedName + '</a></li>';
		}
		// Close off tags
		htmlToAppend +=
				'</ul>'+
			'</li>';
		$('#manageDropdown').after(htmlToAppend);
	}
	
}


/**
 * Different course selected on the navigation menu
 */
$(document).on('click', '.courseNav', function(event) {
	var selectedCourseID = $(this).attr("coursenavid");
	sessionStorage.setItem('courseID', selectedCourseID);
	
	// Load the active page with the new course
	var activePage = $('#menu').find('.active').find('.menuItem').attr('page');
	
	if(activePage == "poll")	// Course changed, so load polls page
		loadPage("managepolls");
	else if(activePage == "results")
		loadPage("manageresults");
	else
		loadPage(activePage);
});

/**
 * Different lecture selected on the navigation menu
 */
$(document).on('click', '.lectureNav', function(event) {
	var selectedLectureID = $(this).attr("lecturenavid");
	if(selectedLectureID == -1){	// If question bank lecture selected from nav menu
		loadPage("questionbank");
		return;
	}
	
	var selectedLectureName = $(this).attr('fullname');
	sessionStorage.setItem('lectureID', selectedLectureID);
	sessionStorage.setItem('lectureName',selectedLectureName);
	
	// Load the active page with the new course
	var activePage = $('#menu').find('.active').find('.menuItem').attr('page');
	
	// Hack to send user to polls page if they select another course on the question bank page
	if(activePage == 'questionbank')
		activePage = 'poll';
	loadPage(activePage);
});


/**
 * Navigation menu item clicked
 */
$(document).on('click', '.menuItem', function(event) {
	var page = $(this).attr("page");
	loadPage(page);
});

/**
 * Logo clicked
 */
$(document).on('click', '#logo', function(event) {
	var role = sessionStorage.getItem('role');
	if(role == "STUDENT")
	{
	loadPage("home_student");
	}
else
	{
	loadPage("home");
	}
});

/**
 * Login / Logout button clicked
 */
$(document).on('click', '#loginLogout', function(event) {
	var userID = sessionStorage.getItem('userID');
	if(userID == null){
		loadPage("login");
	} else {		// Trying to log out
		sessionStorage.clear();
		setBaseSessionVars();
		Cookies.remove("Authorization");
		loadPage("login");
	}
});

/**
 * When click on Username / Register button
 */
$(document).on('click', '#username', function(event) {
	var currUser = sessionStorage.getItem('currUser');
	if(currUser == null){
		loadPage("register");
	} else {		// Trying to modify user's profile
		// TODO: When want to access user's profile navigate there
	}
});


/**
 * Call this on load and after clearing the session.
 */
function setBaseSessionVars() {
	sessionStorage.setItem('baseURL', '/TuringPoint/rest');
	sessionStorage.setItem('isProduction', true);
}

/**
 * Redirect user to desired page
 */
function loadPage(page){
	sessionStorage.setItem('currPage', page);
	window.location.href = "./" + page + ".html";
}

/**
 * Redirect user to desired page, with page query parameters applied.
 * queryParams : should be of form, for example, id=234&user=2323
 */
function loadPageParams(page, queryParams){
	sessionStorage.setItem('currPage', page);
	window.location.href = "./" + page + ".html?" + queryParams;
}

/*
 * Helper Methods Below
 */

/**
 * Returns true if it's a valid email.
 * Returns false otherwise.
 * Source: StackOverflow: http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
 * @param email
 * @returns boolean
 */
function validateEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
}

/**
 * Generates HTML for a Bootstrap alert.
 * @param msg: The message you want to display
 * @param type: Success=1, Info=2, Warning=3, Error=4
 */
function generateAlert(msg, type) {
	var result;
	switch (type) {
		case 1:
			result = '<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>Success:</strong> ' + msg + '</div>';
			break;
		case 2:
			result = '<div class="alert alert-info"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>Info:</strong> ' + msg + '</div>';
			break;
		case 3:
			result = '<div class="alert alert-warning"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>Warning:</strong> ' + msg + '</div>';
			break;
		case 4:
			result = '<div class="alert alert-danger"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>Error:</strong> ' + msg + '</div>';
			break;
	}
	return result;
}

/**
 * Generates HTML for a Bootstrap alert, without dismiss option.
 * @param msg: The message you want to display
 * @param rowClass: Bootstrap column class (ex: col-md-9), or whatever additional classes you want
 * @param type: Success=1, Info=2, Warning=3, Error=4
 */
function generateAlertNonDismiss(msg, rowClass, type) {
	var result;
	switch (type) {
		case 1:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-success"> ' + msg + '</div></div>';
			break;
		case 2:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-info">' + msg + '</div></div>';
			break;
		case 3:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-warning">' + msg + '</div></div>';
			break;
		case 4:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-danger"> ' + msg + '</div></div>';
			break;
	}
	return result;
}

/**
 * Generates HTML for a Bootstrap alert, without dismiss option.
 * @param msg: The message you want to display
 * @param rowClass: Bootstrap column class (ex: col-md-9), or whatever additional classes you want
 * @param type: Success=1, Info=2, Warning=3, Error=4
 */
function generateAlertDismiss(msg, rowClass, type) {
	var result;
	switch (type) {
		case 1:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-success"> ' + msg + '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a></div></div>';
			break;
		case 2:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-info">' + msg + '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a></div></div>';
			break;
		case 3:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-warning">' + msg + '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a></div></div>';
			break;
		case 4:
			result = '<div class="alertDiv ' + rowClass + '"><div class="alert alert-danger"> ' + msg + '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a></div></div>';
			break;
	}
	return result;
}

/**
 * Given a list of courses objects and a course ID return the course object with the specified courseID
 */
function getCourseByCourseID(courses, courseID){
	var indexToLoad = 0;	// Default
	if(courseID != null){
		for (var i = 0; i < courses.length; i++) {	// Search for the desired course by courseID
			var currCourseID = courses[i].courseId;
			
			// TODO: Clean up when "classId" passed as "courseId" like it should
			if(courseID == currCourseID || (courses[i].classId != null && courseID == courses[i].classId )){
				return courses[i];
			}
		}
	}
	return null;	// Not found
}


/************************************************************************************
 ***************************** Lecture Storage Helpers	*********************************
 *************************************************************************************/

/**
 * Given a list of lecture objects and a lectureID return the lecture object with the specified lectureID
 */
function getLectureByLectureID(lectures, lectureID){
	var indexToLoad = 0;	// Default
	if(lectures != null){
		for (var i = 0; i < lectures.length; i++) {	// Search for the desired course by courseID
			var currLectureID = lectures[i].lectureId;
			if(lectureID == currLectureID){
				return lectures[i];
			}
		}
	}
	return null;	// Not found
}


/**
 * Delete a course from the session storage course list
 */
function removeLectureFromStorage(lectureId){
	var lectures = JSON.parse(localStorage.getItem("lectures"));
	for(var i=0; i<lectures.length; i++){
		if(lectures[i].lectureId == lectureId){
			lectures.splice(i, 1);
			break;
		}
	}
	localStorage.setItem("lectures", JSON.stringify(lectures));	// Update list of courses
}

/**
 * Add a course from the session storage course list
 */
function addLectureToStorage(lectures){
	// Add new course to the local storage
	var lectures = JSON.parse(localStorage.getItem("lectures"));
	courses.push(lectures);
	localStorage.setItem("lectures", JSON.stringify(lectures));	// Store list of courses
}

/**
 * Update a course from the session storage course list
 */
function updateLectureInStorage(lecture){
	var lectures = JSON.parse(localStorage.getItem("lectures"));
	for(var i=0; i<lectures.length; i++){
		if(lectures[i].lectureId == lecture.lectureId){
			lectures[i].name = lecture.name;
			break;
		}
	}
	localStorage.setItem("lectures", JSON.stringify(lectures));	// Update list of courses
}

/**
 * Get the size of (number of) lectures in the storage session
 */
function getLecturesLength(){
	return JSON.parse(localStorage.getItem("lectures")).length;
}

/************************************************************************************
 ***************************** Course Storage Helpers	*********************************
 *************************************************************************************/

/**
 * Return the session storage course object with the specified courseID.
 * Assumes session storage course is set, otherwise return null
 */
function getSessionCourseByCourseID(courseID){
	var courses =  JSON.parse(localStorage.getItem("courses"));
	return getCourseByCourseID(courses, courseID);
}


/**
 * Delete a course from the session storage course list
 */
function removeCourseFromStorage(courseId){
	var courses = JSON.parse(localStorage.getItem("courses"));
	for(var i=0; i<courses.length; i++){
		if(courses[i].courseId == courseId){
			courses.splice(i, 1);
			break;
		}
	}
	localStorage.setItem("courses", JSON.stringify(courses));	// Update list of courses
}

/**
 * Add a course from the session storage course list
 */
function addCourseFromStorage(course){
	// Add new course to the local storage
	var courses = JSON.parse(localStorage.getItem("courses"));
	courses.push(course);
	localStorage.setItem("courses", JSON.stringify(courses));	// Store list of courses
}

/**
 * Update a course from the session storage course list
 */
function updateCourseInStorage(course){
	var courses = JSON.parse(localStorage.getItem("courses"));
	for(var i=0; i<courses.length; i++){
		if(courses[i].courseId == course.courseId){
			courses[i].name = course.name;
			courses[i].description = course.description;
			break;
		}
	}
	localStorage.setItem("courses", JSON.stringify(courses));	// Update list of courses
}

/**
 * Trim the input text to the given length and append an ellipsis "..." to the end
 */
function trimText(input, length){
	if(input.length >= length){	// If too long and needs a trimming
		var trimmed = input.substring(0, length);
		trimmed += '...';
		return trimmed;
	} else {
		return input;	// Return input, doesn't need a trimming
	}
}

/**
 * Helper to add an alert with a timeout to an HTML tag of your choice
 * @param selector - The Jquery selector, ex: .something (class) or #something (id), etc.
 * @param alertHTML - The alert HTML (Can combine with alert helpers for some real fun)
 * @param timeout - How many ms to have the alert displayed
 */
function displayAlertWithTimeout(selector, alertHTML, timeout){
	$(selector).html(alertHTML);
	$(selector).removeClass("hidden");
	// Hide the alert after timeout seconds
	setTimeout( function() { $(selector).addClass("hidden"); }, timeout);
}

/*
 * Feedback dialog handlers
 */
function feedbackAreaCheck()
{
	var selector = document.getElementById("feedbackAreaCategory");
	var category = selector.options[selector.selectedIndex].value;
	console.log(category);
    if(category == "Specific Feature Feedback" || category == "Bug Report")
    {
    	$("#feedbackSpecificArea").removeClass("hidden");//.display = "block";
    }
    else
    {
        $("#feedbackSpecificArea").addClass("hidden");//style.display = "none";
    }
    
    if(category == "Bug Report")
	{
    	$("#commentTextLabel").html("Describe what you were doing when you experienced this bug. Please be detailed.");
	}
    else
	{
    	$("#commentTextLabel").html("Comment (Limit 1000 characters)");	
	}
}

$(document).on('click', '#resetFeedbackForm', function(event) {
	$("#feedbackForm")[0].reset();
	feedbackAreaCheck();
});

$(document).on('click', '#feadbackSubmit', function(event) {

	submitFeedback();
});

function submitFeedback()
{
	//verify the form content;
	var abort = false;
	var errmsg = "Please add a description";
	
	//now get the content
	var selector = document.getElementById("feedbackAreaCategory");
	var category = selector.options[selector.selectedIndex].value;
	
	var area = "General";
    if(category == "Specific Feature Feedback" || category == "Bug Report")
    {
    	var areaCont = document.getElementById("feedbackArea");
    	area = selector.options[selector.selectedIndex].value;
    }
    
    var env = window.navigator;
    var consent = $('#consentBox').val();
    var comment = $('#commentInput').val();
    
    if(comment.length > 1000)
	{
    	abort = true;
    	errmsg = "You are too crafty for me";
	}
    if(comment.length == 0)
    	abort = true;

    if(!abort)
	{
		console.log("submitted the form");
		var feedback = {};
		feedback["user"] = sessionStorage.getItem('userID');
		feedback["type"] = category + " " + area;
		feedback["env"] = "NYI";
		feedback["consent"] = consent;
		feedback["comment"] = comment;
		console.log(feedback);
		
		var url = sessionStorage.getItem("baseURL") + "/support/feedback";
	
		$.ajax({
			  method: "POST",
			  url: url,
			  contentType: "application/json",
			  data: JSON.stringify(feedback),
			  complete: submitFeedbackCallback
		});
	}
    
    else {
    	displayAlertWithTimeout('#feedbackStatus', generateAlertNonDismiss(errmsg, '', 4), 3000);
    }
}

function submitFeedbackCallback(data,status)
{
	if (status == "success") {
		displayAlertWithTimeout('#feedbackStatus', generateAlertNonDismiss('Feedback Received', '', 1), 3000);
	}
	else {
		displayAlertWithTimeout('#feedbackStatus', generateAlertNonDismiss('Feedback Submission failed', '', 4), 3000);
	}
}

/**
 * Get the URL query parameter value by its name
 * @param sParam
 * @returns
 */
function GetURLParameter(sParam){

	var sPageURL = window.location.search.substring(1);
	var sURLVariables = sPageURL.split('&');
	
	for (var i = 0; i < sURLVariables.length; i++)
	{
		var sParameterName = sURLVariables[i].split('=');
		if (sParameterName[0] == sParam)
		{
			return sParameterName[1];
		}
	}
}
