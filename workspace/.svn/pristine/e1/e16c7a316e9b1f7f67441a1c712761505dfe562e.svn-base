package com.turingpoint.dbmodel.db.persister;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.CacheMode;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.StatelessSession;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.jpa.internal.schemagen.GenerationSourceFromScript;
import org.hibernate.transform.AliasToBeanResultTransformer;

import com.turingpoint.dbmodel.db.dto.LectureStatus;
import com.turingpoint.dbmodel.db.mapping.ActiveQuestion;
import com.turingpoint.dbmodel.db.mapping.HibernateUtil;
import com.turingpoint.dbmodel.db.mapping.Lecture;
import com.turingpoint.dbmodel.db.mapping.Question;

/**
 * Lecture persister to create and get lecture details.
 * 
 * @author scotthadley
 */
public class LecturePersister extends HibernateUtil{

  /**
   * Get all the lectures of a course from a provided course ID.
   */
  @SuppressWarnings("unchecked")
  public static List<Lecture> getLecturesForCourse(Long courseId) {
    Session session = null;
    try {
      session = getSession();
      Criteria criteria = HibernateUtil.getCriteria(session, com.turingpoint.dbmodel.db.mapping.Lecture.class);
      criteria.add(Restrictions.eq("classId", courseId));
      return criteria.list();
    }
    finally {
      session.close();
    }
  }

  /**
   * NOTE: This is for the instructor to get all the questions in a class. Get a list of Lecture Status' (Which contain
   * a set of question Ids, title, and version) for a provided lecture id.
   */
  @SuppressWarnings("unchecked")
  public static List<LectureStatus> getQuestionsForLecture(Long lectureId) {
    
    //Session session = null;
	  StatelessSession session = null;
    
    try{
      session = getStatelessSession();
      Criteria criteria = HibernateUtil.getStatelessCriteria(session, Question.class);
      criteria.add(Restrictions.eq("lectureId", lectureId));

      ProjectionList projList = Projections.projectionList();
      projList.add(Projections.property("questionId").as("questionId"));
      projList.add(Projections.property("title").as("title"));
      projList.add(Projections.property("version").as("version"));
      projList.add(Projections.groupProperty("questionId"));

      criteria.setProjection(projList);

      criteria.setResultTransformer(new AliasToBeanResultTransformer(LectureStatus.class));

      return criteria.list();
    } finally {
      session.close();
    }
  }

  /**
   * Student gets the status of the active questions of a lecture
   * 
   * @param classId
   * @return
   */
  public static List<LectureStatus> getActiveQuestions(Long courseId) {

    // TODO: Convert to inner join
    
    Session session = null;
    
    try{
      session = getSession();
      
      Criteria criteria = HibernateUtil.getCriteria(session, ActiveQuestion.class);
      criteria.add(Restrictions.eq("activeQuestionId.classId", courseId));
      criteria.setProjection(Projections.property("activeQuestionId.questionId"));
      List<Long> questionIds = criteria.list();
      
      List<LectureStatus> returnStatus = new ArrayList<LectureStatus>();
      for (Long questionId : questionIds) {
        Criteria newCriteria = HibernateUtil.getCriteria(session, Question.class);
        newCriteria.add(Restrictions.eq("questionId", questionId));

        ProjectionList projList = Projections.projectionList();
        projList.add(Projections.property("questionId").as("questionId"));
        projList.add(Projections.property("title").as("title"));
        projList.add(Projections.property("version").as("version"));
        projList.add(Projections.groupProperty("questionId"));

        newCriteria.setProjection(projList);

        newCriteria.setResultTransformer(new AliasToBeanResultTransformer(LectureStatus.class));
        returnStatus.add((LectureStatus) newCriteria.uniqueResult());
      }
      return returnStatus;
      
    } finally {
      session.close();
    }
    

  }

  /**
   * Get the name of a lecture
   */
  public static String getLectureName(Long lectureId) {
    Session session = null;
    try{
      session = getSession();
      Criteria criteria = HibernateUtil.getCriteria(session, Lecture.class);
      criteria.add(Restrictions.eq("lectureId", lectureId));
      criteria.setProjection(Projections.property("name"));
      return (String) criteria.uniqueResult();
    } finally {
      session.close();
    }
    

  }

  /**
   * Instructor creates a new lecture
   */
  public static Lecture createLecture(Long courseId, String name) {
    Lecture lecture = new Lecture();
    lecture.setClassId(courseId);
    lecture.setName(name);
    return lecture.save();
  }

  public static Lecture updateLectureName(Long lectureId, String newName) {
    Lecture lecture = Lecture.getLecture(lectureId);
    lecture.setName(newName);
    return lecture.update();
  }
}
