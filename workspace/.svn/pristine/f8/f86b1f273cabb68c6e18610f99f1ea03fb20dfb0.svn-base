package com.turingpoint.dbmodel.db.persister;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.turingpoint.dbmodel.db.mapping.ActiveQuestion;
import com.turingpoint.dbmodel.db.mapping.HibernateUtil;
import com.turingpoint.dbmodel.db.mapping.Question;
import com.turingpoint.dbmodel.model.QuestionType;

public class QuestionPersister extends HibernateUtil{

	public static Question createQuestion(Long lectureId, int points, String questionContent, String title,
			String feedback, QuestionType type, Long courseId) {
		return createQuestionHelper(lectureId, points, questionContent, title, feedback, type, courseId, false);
	}
	
	public static Question createQuestionBankQuestion(int points, String questionContent, String title,
			String feedback, QuestionType type, Long courseId) {
		return createQuestionHelper(null, points, questionContent, title, feedback, type, courseId, true);
	}
	
	private static Question createQuestionHelper(Long lectureId, int points, String questionContent, String title,
			String feedback, QuestionType type, Long courseId, boolean isQuestionBank){
		Question question = new Question();
		
		if(isQuestionBank){

			Long qBanklectureId = LecturePersister.getQuestionBankLecture(courseId).getLectureId();
			question.setLectureId(qBanklectureId);
			question.setIsQuestionBank(true);
		}else{
			question.setLectureId(lectureId);
			question.setIsQuestionBank(false);
		}
		question.setPoints(points);
		question.setQuestion(questionContent);
		question.setTitle(title);
		question.setType(type);
		question.setVersion(0);
		question.setFeedback(feedback);
		question.save();
		return question;
	}
	
	@SuppressWarnings("unchecked")
	public static List<Question> getQuestionBankQuestions(Long lectureId){
	      Session session = null;
	      try{
	        session = getSession();
	        Criteria criteria = session.createCriteria(Question.class);
	        criteria.add(Restrictions.eq("isQuestionBank", true));
	        criteria.add(Restrictions.eq("lectureId", lectureId));

	        return criteria.list();
	      } finally {
	        session.close();
	      }
	}

	/**
	 * Start a question.
	 * @param courseId
	 * @param questionId
	 */
	public static void startQuestion(Long courseId, Long questionId){
		
		System.out.println("Starting: courseID: " + courseId + ", Question Id: " + questionId);
		
		ActiveQuestion activeQuestion = new ActiveQuestion();
		activeQuestion.setActiveQuestionId(courseId, questionId);
		activeQuestion.save();
	}
	
	public static void endQuestion(Long courseId, Long questionId){
		ActiveQuestion activeQuestion = ActiveQuestion.getActiveQuestion(courseId, questionId);
		activeQuestion.delete();
	}
	
	@SuppressWarnings("unchecked")
	public static List<ActiveQuestion> getActiveQuestions(Long classId) {
		Session session = null;
	    try{
	        session = getSession();
			Criteria criteria = session.createCriteria(ActiveQuestion.class);
			return (List<ActiveQuestion>) criteria.add(Restrictions.eq("classId", classId)).list();
	      } finally {
	        session.close();
	      }
	}

}
